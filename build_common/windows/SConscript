##
# This script includes windows specific config (MSVS/MSVC)
##
Import('env')
import os.path

# Set common flags
if env['CC'] == 'cl':
    #  - warning C4133: incompatible type conversion
    env.AppendUnique(CCFLAGS=['/we4133'])

    # Disable the following warnings:
    #  - warning C4127: conditional expression is constant
    #    - Disabled due to the widespread usage in IoTivity
    #  - warning C4200: zero-sized array in struct/union.
    #    - It is an acceptable approach for variable size structs.
    #  - warning C4201: nameless struct/union
    #    - Disabled due to IoTivity not being ANSI compatible
    #  - warning C4204: nonstandard extension used: non-constant aggregate initializer
    #    - Disabled due to IoTivity not being ANSI compatible and this is an appropriate way to intialize
    #      structs for non-legacy compilers.
    #  - warning C4214:  bit field types other than int
    #    - Disabled due to IoTivity not being ANSI compatible
    #  - warning C4232: nonstandard extension used: 'read': address of dllimport 'fread' is not static, identity not guaranteed
    #    - fread, frwrite, etc are provided by the platform and cannot be changed.
    #  - warning C4706: assignment within conditional expression
    #    - Disabled due to the widespread usage in IoTivity and low impact.
    env.AppendUnique(CCFLAGS=['/wd4127', '/wd4200', '/wd4201', '/wd4204', '/wd4214', '/wd4232', '/wd4706'])

    env.AppendUnique(CCFLAGS=['/EHsc'])

    # Set release/debug flags
    if env.get('RELEASE'):
        env.AppendUnique(CCFLAGS = ['/MD', '/O2', '/GF'])
        env.AppendUnique(CPPDEFINES = ['NDEBUG'])
    else:
        env.AppendUnique(CCFLAGS = ['/MDd', '/Od', '/RTC1'])
        env.AppendUnique(LINKFLAGS = ['/debug'])
    env.AppendUnique(LIBPATH = [env.get('BUILD_DIR')])
    env.AppendUnique(PATH = os.environ['PATH'])
    env['PDB'] = '${TARGET.base}.pdb'
    env.Append(LINKFLAGS=['/PDB:${TARGET.base}.pdb'])

    # Add Windows-specific libraries
    env.AppendUnique(LIBS = ['bcrypt', 'ws2_32', 'advapi32', 'iphlpapi', 'crypt32', 'kernel32'])

    # Visual Studio compiler complains that functions like strncpy are unsafe. We
    # are aware that it's possible to create a non-null terminated string using the
    # strncpy function.  However, the str*_s functions are not standard and thus
    # will not work on all systems supported by IoTivity. This will prevent Visual
    # Studio from displaying unwanted warnings.
    # See https://msdn.microsoft.com/en-us/library/ttcz0bys.aspx for more details.
    env.AppendUnique(CPPDEFINES=['_CRT_SECURE_NO_WARNINGS', '_CRT_NONSTDC_NO_WARNINGS'])

elif env['CC'] == 'gcc':
    print "\nError: gcc not supported on Windows.  Use Visual Studio!\n"
    Exit(1);

