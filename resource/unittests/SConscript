#******************************************************************
#
# Copyright 2014 Intel Mobile Communications GmbH All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

import os
import os.path
from tools.scons.RunTest import *

Import('test_env')

# SConscript file for Local PKI google tests
unittests_env = test_env.Clone()
src_dir = unittests_env.get('SRC_DIR')
target_os = unittests_env.get('TARGET_OS')
with_mq = unittests_env.get('WITH_MQ')

######################################################################
# Build flags
######################################################################
unittests_env.PrependUnique(CPPPATH = [
		'../include',
		'../oc_logger/include',
		'../csdk/include',
		'../csdk/stack/include',
		'../csdk/security/include',
		'../csdk/stack/include/internal',
		'../csdk/connectivity/api',
		'../csdk/connectivity/external/inc',
		'../csdk/ocsocket/include',
		'../c_common/ocrandom/include',
		'../csdk/logger/include',
		'#extlibs/hippomocks-master/HippoMocks',
		'#extlibs/hippomocks-master/HippoMocksTest'
		])

if target_os in ['windows']:
	unittests_env.AppendUnique(CPPPATH = ['#extlibs/boost/boost'])
	unittests_env.AppendUnique(LIBS = ['sqlite3'])
	# On Windows, octbstack_test is a static LIB, that makes calls into static LIB ocsrm.
	# On other platforms, octbstack_test is a shared LIB, that includes static LIB ocsrm.
	unittests_env.AppendUnique(LIBS = ['ocsrm'])

unittests_env.PrependUnique(LIBS = [
		'oc',
		'octbstack_test',
		'oc_logger',
		'connectivity_abstraction',
		'coap',
		'timer',
		'mbedcrypto'])

if unittests_env.get('SECURED') == '1':
	unittests_env.AppendUnique(LIBS = ['mbedtls', 'mbedx509'])

if unittests_env.get('LOGGING'):
	unittests_env.AppendUnique(CPPDEFINES = ['TB_LOG'])

if unittests_env.get('WITH_CLOUD'):
	unittests_env.AppendUnique(CPPDEFINES = ['WITH_CLOUD'])

######################################################################
# Source files and Targets
######################################################################

unittests_src = [
		'ConstructResourceTest.cpp',
		'OCPlatformTest.cpp',
		'OCRepresentationTest.cpp',
		'OCRepresentationEncodingTest.cpp',
		'OCResourceTest.cpp',
		'OCExceptionTest.cpp',
		'OCResourceResponseTest.cpp',
		'OCHeaderOptionTest.cpp'
	]

# TODO: Fix errors in the following Windows tests.
if target_os in ['windows']:
	if '12.0' == unittests_env['MSVC_VERSION']:
		unittests_src.remove('OCPlatformTest.cpp')
		unittests_src.remove('OCRepresentationEncodingTest.cpp')
		unittests_src.remove('OCRepresentationTest.cpp')
		unittests_src.remove('OCResourceTest.cpp')

if (('SUB' in with_mq) or ('PUB' in with_mq) or ('BROKER' in with_mq)):
	unittests_src = unittests_src + ['OCMQResourceTest.cpp']

if unittests_env.get('WITH_CLOUD'):
	unittests_src = unittests_src + ['OCAccountManagerTest.cpp']

unittests = unittests_env.Program('unittests', unittests_src)

Alias("unittests", [unittests])

unittests_env.AppendTarget('unittests')
if unittests_env.get('TEST') == '1':
	if target_os in ['windows']:
		unittests_env.AppendENVPath('PATH', unittests_env.get('BUILD_DIR'))
	if target_os in ['linux', 'windows']:
                run_test(unittests_env,
                         'resource_unittests_unittests.memcheck',
                         'resource/unittests/unittests',
                         unittests)

src_dir = unittests_env.get('SRC_DIR')
svr_db_src_dir = os.path.join(src_dir, 'resource/examples/')
svr_db_build_dir = os.path.join(unittests_env.get('BUILD_DIR'), 'resource', 'unittests') + os.sep
unittests_env.Alias("install",
                    unittests_env.Install(svr_db_build_dir,
                                          os.path.join(svr_db_src_dir,
                                                       'oic_svr_db_client.dat')))
