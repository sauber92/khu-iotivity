#******************************************************************
#
# Copyright 2017 Microsoft
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

##
# ipca lib (shared library) build script
##
Import('ipca_env')
target_os = ipca_env.get('TARGET_OS')
ipca_lib_env = ipca_env.Clone()
rd_mode = ipca_lib_env.get('RD_MODE')

######################################################################
# Build flags
######################################################################
ipca_lib_env.PrependUnique(CPPPATH = [
        '../inc',
        'inc',
        '#/resource/include',
        '#/resource/oc_logger/include',
        '#/resource/csdk/include',
        '#/resource/csdk/stack/include',
        '#/resource/csdk/security/include',
        '#/resource/csdk/security/provisioning/include',
        '#/resource/csdk/security/provisioning/include/internal',
        '#/resource/csdk/connectivity/api',
        '#/resource/csdk/connectivity/external/inc',
        '#/resource/csdk/connectivity/lib/libcoap-4.1.1/include',
        '#/resource/csdk/ocsocket/include',
        '#/resource/csdk/logger/include',
        '#/resource/c_common/ocrandom/include',
        '#/extlibs/boost/boost',
        '#/extlibs/cjson',
        ])

ipca_lib_env.Replace(WINDOWS_INSERT_DEF = ['1'])

ipca_lib_env.PrependUnique(LIBS = [
        'oc',
        'connectivity_abstraction',
        'coap',
        'octbstack',
        'oc_logger'
        ])

if ipca_env.get('SECURED') == '1':
    ipca_lib_env.PrependUnique(LIBS = [
            'mbedtls',
            'mbedx509',
            'mbedcrypto',
            'ocprovision'
            ])

if 'CLIENT' in rd_mode or 'SERVER' in rd_mode:
    ipca_lib_env.PrependUnique(LIBS = ['resource_directory'])

######################################################################
# Source files and Targets
######################################################################
ipca_lib_src = [
    'app.cpp',
    'ipca.cpp',
    'callback.cpp',
    'ocfframework.cpp',
    'device.cpp',
    'ipcavariant.cpp',
    'common.cpp'
        ]

if ipca_lib_env.get('SECURED') != '1':
    ipca_lib_src.append('pretendocprovision.cpp')

ipca_shared_lib = ipca_lib_env.SharedLibrary('ipca', ipca_lib_src)
ipca_lib = Flatten(ipca_shared_lib)

ipca_static_lib = ipca_lib_env.StaticLibrary('ipca_static', ipca_lib_src)

ipca_lib_env.UserInstallTargetHeader('../inc/ipca.h', 'resource', 'ipca.h')
ipca_lib_env.UserInstallTargetLib(ipca_lib, 'ipca')
ipca_lib_env.UserInstallTargetLib(ipca_static_lib, 'ipca')